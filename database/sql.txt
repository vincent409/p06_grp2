CREATE DATABASE IF NOT EXISTS amc;
USE amc;

-- Create the Role table
CREATE TABLE Role (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL
);

-- Create the Status table
CREATE TABLE Status (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL
);

-- Create the Profile table
CREATE TABLE Profile (
    id INT PRIMARY KEY AUTO_INCREMENT,
    role_id INT NOT NULL,
    admin_number VARCHAR(255) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(255),
    department VARCHAR(255) NOT NULL,
    has_logged_in TINYINT(1) NOT NULL DEFAULT 0,
    FOREIGN KEY (role_id) REFERENCES Role(id)
);

-- Create the User table
CREATE TABLE User_Credentials (
    id INT PRIMARY KEY AUTO_INCREMENT,
    profile_id INT NOT NULL,
    password VARCHAR(255) NOT NULL,
    FOREIGN KEY (profile_id) REFERENCES Profile(id) ON DELETE CASCADE
);

-- Create the Equipment table
CREATE TABLE Equipment (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL,
    purchase_date DATE NOT NULL,
    model_number VARCHAR(255) NOT NULL
);

-- Create the Loan table
CREATE TABLE Loan (
    id INT PRIMARY KEY AUTO_INCREMENT,
    status_id INT NULL,
    profile_id INT NOT NULL,
    equipment_id INT NOT NULL,
    FOREIGN KEY (profile_id) REFERENCES Profile(id),
    FOREIGN KEY (equipment_id) REFERENCES Equipment(id),
    FOREIGN KEY (status_id) REFERENCES Status(id) ON DELETE CASCADE
);

-- Create the Usage_Log table
CREATE TABLE Usage_Log (
    id INT PRIMARY KEY AUTO_INCREMENT,
    equipment_id INT NOT NULL,
    log_details VARCHAR(1000) NOT NULL,
    assigned_date DATE DEFAULT CURRENT_DATE NOT NULL,
    returned_date DATE NULL,
    FOREIGN KEY (equipment_id) REFERENCES Equipment(id) ON DELETE CASCADE
);

-- Insert data into Role table
INSERT INTO Role (name) 
VALUES 
    ('Admin'),
    ('Facility Manager'),
    ('Student');

-- Insert data into Status table
INSERT INTO Status (name) 
VALUES 
    ('Assigned'),
    ('In-Use'),
    ('Returned');
CREATE TABLE PasswordReset (
    id INT AUTO_INCREMENT PRIMARY KEY,
    profile_id INT NOT NULL,
    reset_token VARCHAR(255) NOT NULL,
    reset_token_time DATETIME NOT NULL,
    FOREIGN KEY (profile_id) REFERENCES Profile(id) ON DELETE CASCADE
);
